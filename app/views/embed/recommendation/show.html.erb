<% if @video_ids.any? %>
  <div class="container">
      <% @video_ids.each_with_index do |video_id, index| %>
        <% if video_id %>
            <div class="yt_video thumbnail embed-container" style="height:180px; width: <%=index == 0 || index == 1 ? '33%' : 'auto'; %>">
              <%= content_tag(:iframe, nil, src: "//www.youtube.com/embed/#{video_id}?enablejsapi=1&origin=#{ENV['host_url']}", id: 'recommend'+index.to_s, docUrl: @url) %>
            </div>
        <% end %>
      <% end %>
  </div>
<% end %>
<script type="text/javascript">
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    
    // This function takes the existing <iframe> (and YouTube player)
    // with id 'player1' and adds an event listener for state changes.
    var player1, player2, player3;
    function onYouTubeIframeAPIReady() {
      
      player1 = new YT.Player('recommend0', {
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });

      player2 = new YT.Player('recommend1', {
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });

      player3 = new YT.Player('recommend2', {
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });
    }
    
    function onPlayerReady(event){
      console.log("Inside onPlayerReady.......");
    }
    
    function onPlayerStateChange(event) {
      console.log('Inside onPlayerStateChange......')
      var docUrl, videoUrl;
      switch(event.data) {
        case YT.PlayerState.PLAYING:
          console.log('playing')
          docUrl = event.target.a.getAttribute('docUrl');
          videoUrl = event.target.getVideoUrl();
          // console.log(event.target.getVideoData())
          var xmlhttp = new XMLHttpRequest();

          xmlhttp.onreadystatechange = function() {
              if (xmlhttp.readyState == XMLHttpRequest.DONE ) {
                  if (xmlhttp.status == 200) {
                    
                  }
                 else if (xmlhttp.status == 400) {
                    //alert('There was an error 400');
                 }
                 else {
                     //alert('something else other than 200 was returned');
                 }
              }
          };

          var postData = JSON.stringify({ tracking: { page_url: docUrl, video_url: videoUrl } });
          xmlhttp.open("POST", "<%=ENV['tracking_url']+'/trackings'%>", true);
          xmlhttp.setRequestHeader('Content-type', 'application/json');
          xmlhttp.send(postData);
          break;
        case YT.PlayerState.PAUSED:
         console.log('paused')
          break;
        case YT.PlayerState.ENDED:
          console.log('finished')
          break;
        default:
          return;
      }
    }
</script>